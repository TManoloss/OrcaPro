version: '3.8'

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  rabbitmq-data:
  prometheus-data:
  grafana-data:
  loki-data:
  ai-models:

services:
  # ============================================
  # BANCOS DE DADOS
  # ============================================
  
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: app_database
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # MENSAGERIA
  # ============================================
  
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ============================================
  # OBSERVABILIDADE - MÉTRICAS
  # ============================================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - app-network
    depends_on:
      - postgres
      - redis
      - rabbitmq

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - app-network
    depends_on:
      - prometheus
      - loki

  # ============================================
  # OBSERVABILIDADE - TRACES
  # ============================================
  
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    restart: unless-stopped
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: :9411
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "5775:5775/udp"   # Zipkin compact
      - "6831:6831/udp"   # Jaeger compact
      - "6832:6832/udp"   # Jaeger binary
      - "5778:5778"       # Configs
      - "16686:16686"     # Web UI
      - "14250:14250"     # gRPC
      - "14268:14268"     # HTTP
      - "14269:14269"     # Health check
      - "9411:9411"       # Zipkin
      - "4317:4317"       # OTLP gRPC
      - "4318:4318"       # OTLP HTTP
    networks:
      - app-network

  # ============================================
  # OBSERVABILIDADE - LOGS
  # ============================================
  
  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki-data:/loki
    networks:
      - app-network

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./config/promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - app-network
    depends_on:
      - loki

  # ============================================
  # FERRAMENTAS AUXILIARES
  # ============================================
  
  # Adminer - Interface Web para PostgreSQL
  adminer:
    image: adminer:latest
    container_name: adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      - postgres

  # Redis Commander - Interface Web para Redis
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis123
    ports:
      - "8081:8081"
    networks:
      - app-network
    depends_on:
      - redis

  # ============================================
  # MICROSSERVIÇOS
  # ============================================

  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    restart: unless-stopped
    environment:
      ENVIRONMENT: development
      SERVER_PORT: :8001
      DATABASE_URL: postgresql://admin:admin123@postgres:5432/app_database
      REDIS_URL: redis://:redis123@redis:6379/0
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRATION: 3600
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    ports:
      - "8001:8001"
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      jaeger:
        condition: service_started
    labels:
      logging: "promtail"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  transaction-service:
    build:
      context: ./services/trasaction-service
      dockerfile: Dockerfile
    container_name: transaction-service
    restart: unless-stopped
    environment:
      ENVIRONMENT: development
      SERVER_PORT: :8002
      DATABASE_URL: postgresql://admin:admin123@postgres:5432/app_database
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672/
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
    ports:
      - "8002:8002"
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      jaeger:
        condition: service_started
    labels:
      logging: "promtail"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # SERVIÇOS DE IA E PROCESSAMENTO
  # ============================================

  ai-service:
    build:
      context: ./services/ai-service
      dockerfile: Dockerfile
    container_name: ai-service
    restart: unless-stopped
    environment:
      ENVIRONMENT: development
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672/
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      METRICS_PORT: 8003
      MODEL_PATH: /app/models/categorizer.pkl
      TRANSACTION_SERVICE_URL: http://transaction-service:8002
      CONFIDENCE_THRESHOLD: 0.5
      RETRAIN_INTERVAL: 86400
    ports:
      - "8003:8003"
    networks:
      - app-network
    volumes:
      - ai-models:/app/models
    depends_on:
      rabbitmq:
        condition: service_healthy
      jaeger:
        condition: service_started
    labels:
      logging: "promtail"
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8003')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
