name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: 
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: 
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      rabbitmq:
        image: rabbitmq:3.12-management-alpine
        env:
          RABBITMQ_DEFAULT_USER: rabbit
          RABBITMQ_DEFAULT_PASS: rabbit
        ports:
          - 5672:5672
          - 15672:15672
        options: 
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Verificar conexÃ£o com PostgreSQL
    - name: Check PostgreSQL connection
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -c "SELECT 'PostgreSQL connection successful';"

    # Build Node.js (backend)
    - name: Build Node.js backend
      working-directory: ./backend
      run: |
        if [ ! -f package.json ]; then
          echo '{
            "name": "backend",
            "version": "1.0.0",
            "scripts": {
              "build": "echo \"Building Node.js backend...\""
            }
          }' > package.json
        fi
        
        npm install
        npm run build

    # Build Node.js (frontend-web)
    - name: Build Node.js frontend
      working-directory: ./frontend-web
      run: |
        if [ ! -f package.json ]; then
          echo '{
            "name": "frontend-web",
            "version": "1.0.0",
            "scripts": {
              "build": "echo \"Building Node.js frontend...\""
            }
          }' > package.json
        fi
        
        npm install
        npm run build

    # Build Go Hello World
    # - name: Build Go application
    #   run: |
    #     mkdir -p go-app
    #     cat <<EOF > go-app/main.go
    #     package main
        
    #     import "fmt"
        
    #     func main() {
    #         fmt.Println("Hello, Go!")
    #     }
    #     EOF
        
    #     cd go-app
    #     go build -v .
    #     ./main

    # Build Java Hello World
    # - name: Build Java application
    #   run: |
    #     mkdir -p java-app
    #     cat <<EOF > java-app/HelloWorld.java
    #     public class HelloWorld {
    #         public static void main(String[] args) {
    #             System.out.println("Hello, Java!");
    #         }
    #     }
    #     EOF
        
        # cd java-app
        # javac HelloWorld.java
        # java HelloWorld
